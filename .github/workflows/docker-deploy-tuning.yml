name: AI Docker CI/CD

on:
  push:
    branches:
      - feature/docker-deploy # feature/docker-deploy 브랜치에 Push 시 CI/CD 실행
#  pull_request:
#    types: [closed] # PR이 닫혔을 때 (병합 포함)
#    branches:
#      - main # main 브랜치로 Merge 시 -> Production 환경에 배포
#      - develop # develop 브랜치로 Merge 시 -> DEV 환경에 배포

  # ✅ 수동 `실행 트리거 추가
  workflow_dispatch:
    inputs:
      env:
        description: "배포 환경 선택"
        required: true
        default: "DEV"
        type: choice
        options:
          - DEV
          - PROD
env:
  BASE_IMAGE_NAME: base
  PROD_IMAGE_NAME: tuning-api
jobs:
  # CI 작업: 테스트 및 이미지 빌드
  ci:
    runs-on: ubuntu-latest
    steps:

    # 1. 소스 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

   # # 2. Python 설정
   # - name: Set up Python
   #   uses: actions/setup-python@v4
   #   with:
   #     python-version: '3.10'
   #     cache: 'pip'
   #     cache-dependency-path: |
   #       app-tuning/requirements.txt

    # 3. 의존성 설치
    #- name: Install dependencies
    # run: |
    #    pip install --upgrade pip
    #    pip install -r app-tuning/requirements.txt

    # 4. 테스트 실행
    #- name: Run tests
    #  run: |
    #   pytest || echo "⚠️ 테스트 없음 또는 실패, 계속 진행"
    
    # 5. AWS 인증
    - name: Configure AWS credentials
      if: success()
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}


     # 6. ECR 로그인
    - name: Login to Amazon ECR
      if: success()
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
 
    # 7. 태그 정보 생성
    - name: Generate tags
      if: success()
      id: generate-tags
      run: |
     
       BRANCH=${{ github.base_ref }}
       BRANCH="${{ github.ref_name }}"
       SANITIZED_BRANCH="${BRANCH//\//-}"
       SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
       BRANCH="$SANITIZED_BRANCH"   # 다시 덮어쓰기 (or IMAGE_TAG에 바로 SANITIZED_BRANCH 써도 됨)
       SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
       IMAGE_TAG="${BRANCH}-${SHORT_SHA}"    # 공백 없이!
       if [ "$BRANCH" = "main" ]; then
         ENV_TAG="main-latest"
       else
         ENV_TAG="develop-latest"
       fi
       ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
       REPOSITORY=tuning-api
       FULL_IMAGE="$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG"

       echo "branch=$BRANCH" >> $GITHUB_OUTPUT
       echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
       echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
       echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT
       echo "full_image=$FULL_IMAGE" >> $GITHUB_OUTPUT
       echo "ecr_registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT
       echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
   
    # 8. Docker 이미지 빌드 및 푸시
    - name: Build and push Docker image with cache
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: tuning-api
        IMAGE_TAG: ${{ steps.generate-tags.outputs.image_tag }}
        ENV_TAG: ${{ steps.generate-tags.outputs.env_tag }}
      run: |
        echo "🏗️ Docker 이미지 빌드 시작 (with cache)..."
        docker build \
          --cache-from=type=registry,ref=$ECR_REGISTRY/$REPOSITORY:$ENV_TAG \
          --cache-to=type=inline \
          -f Dockerfile.base-tuning \
          -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
          .
        docker tag $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$REPOSITORY:$ENV_TAG
        echo "📤 Docker 이미지 푸시 중..."
        docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$REPOSITORY:$ENV_TAG
    
    - name: Send success notification
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"username\": \"AI CI\", \"content\": \"✅ [AI CI 성공] **${{ steps.generate-tags.outputs.branch }}** 브랜치\\n🔖 태그: ${{ steps.generate-tags.outputs.image_tag }}\\n🆔 Commit: ${{ steps.generate-tags.outputs.short_sha }}\\n📦 이미지: ${{ steps.generate-tags.outputs.full_image }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_PR_URL }}
    
    outputs:
    
      
      branch: ${{ steps.generate-tags.outputs.branch }}
      image_tag: ${{ steps.generate-tags.outputs.image_tag }}
      env_tag: ${{ steps.generate-tags.outputs.env_tag }}
      full_image: ${{ steps.generate-tags.outputs.full_image }}
      short_sha: ${{ steps.generate-tags.outputs.short_sha }}
      ecr_registry: ${{ steps.generate-tags.outputs.ecr_registry }}
      repository: ${{ steps.generate-tags.outputs.repository }} 
  # CD 작업: 배포
  cd:
    needs: ci  # CI 작업이 성공한 후에 실행
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables from SSM
        id: ssm
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            # 멀티라인 마스킹 처리
            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ github.ref_name }}"
          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"   # 다시 덮어쓰기 (or IMAGE_TAG에 바로 SANITIZED_BRANCH 써도 됨)
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=production" >> $GITHUB_ENV
            load_param "/global/gcp/PROD_GCP_HOST_AI" HOST
            load_param "/global/gcp/PROD_GCP_INSTANCE_AI" INSTANCE
            load_param "/global/gcp/PROD_GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/PROD_GCP_ZONE" ZONE
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY" gcp-sa-key.json
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "ENV=develop" >> $GITHUB_ENV
            load_param "/global/gcp/DEV_GCP_HOST_AI" HOST
            load_param "/global/gcp/DEV_GCP_INSTANCE_AI" INSTANCE
            load_param "/global/gcp/DEV_GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/DEV_GCP_ZONE" ZONE
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY" gcp-sa-key.json
          else
            echo "ENV=develop" >> $GITHUB_ENV
            load_param "/global/gcp/DEV_GCP_HOST_AI_TEST" HOST
            load_param "/global/gcp/DEV_GCP_INSTANCE_AI_TEST" INSTANCE
            load_param "/global/gcp/DEV_GCP_PROJECT_ID" PROJECT_ID
            load_param "/global/gcp/DEV_GCP_ZONE_TEST" ZONE
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY" gcp-sa-key.json
          fi

          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          

          load_param "/global/gcp/SSH_USERNAME" SSH_USERNAME
          load_secret_to_file "/global/gcp/SSH_PRIVATE_KEY" id_rsa
          chmod 600 id_rsa
          echo "SSH_KEY_PATH=id_rsa" >> $GITHUB_ENV
         

      - name: Read GCP SA key JSON
        id: read_sa_key
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set environment variables
        id: set-env
        run: |
          # CI 작업에서 전달받은 값들
          IMAGE_TAG="${{ needs.ci.outputs.image_tag }}"
          SHORT_SHA="${{ needs.ci.outputs.short_sha }}"
      
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "FULL_IMAGE=${{ needs.ci.outputs.full_image }}" >> $GITHUB_ENV

      - name: Authenticate to GCP
        if: env.ENV == 'production'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.SA_KEY }}
      - name: Authenticate to GCP DEV
        if: env.ENV == 'develop'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.SA_KEY }}


      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Boot target instance (start/resume with conditional wait)
        run: |
            if [[ -z "$ZONE" ]]; then
                echo "❌ ZONE 환경변수가 설정되지 않았습니다."
                exit 1
            fi
    
            if [[ -z "$INSTANCE" ]]; then
                echo "❌ INSTANCE 환경변수가 설정되지 않았습니다."
                exit 1
            fi
    
            STATUS=$(gcloud compute instances describe "$INSTANCE" --zone="$ZONE" --format='get(status)')
            echo "🔎 현재 상태: $STATUS"

            if [[ "$STATUS" == "SUSPENDED" ]]; then
                echo "🔄 'resume' 명령 실행"
                gcloud compute instances resume "$INSTANCE" --zone="$ZONE"
                sleep 30
            elif [[ "$STATUS" == "TERMINATED" ]]; then
                echo "🔄 'start' 명령 실행"
                gcloud compute instances start "$INSTANCE" --zone="$ZONE"
                sleep 30
            else
                echo "✅ 이미 실행 중"
            fi
       

      - name: Deploy to GCP
        uses: appleboy/ssh-action@v0.1.10
        with:
            host: ${{ env.HOST }}
            username: ${{ env.SSH_USERNAME }}
            key: ${{ env.SSH_KEY_PATH }}
            port: 22
            script_stop: true
            envs: |
              ENV=${{ env.ENV }}
              AWS_REGION=${{ secrets.AWS_REGION }}
              AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            script: |
              # 배포 디렉토리로 이동
              cd /home/deploy
              
               # ChromaDB가 PM2에 의해 실행 중인지 확인
              if ! pm2 status chromadb | grep -q "online"; then
              echo "ChromaDB가 실행되지 않았습니다. PM2를 통해 시작 중..."
              pm2 start ecosystem.config.js --only chromadb
              else
                echo "ChromaDB는 이미 실행 중입니다."
              fi



              # .env 파일 생성 (필요한 경우)
              cat > .env << EOF
              # AWS 설정
              AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
              AWS_REGION=$AWS_REGION
              IMAGE_TAG=$IMAGE_TAG
              EOF
              
              # AWS ECR 로그인 (ECR 사용하는 경우)
              if [ -n "$AWS_REGION" ] && [ -n "$AWS_ACCOUNT_ID" ]; then
                aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
              fi
              
              cd 2-hertz-ai
           
              docker build 
                -f Dockerfile.prod-tuning \
                -t ${{env.FULL_IMAGE}} \
                --build-arg BASE_IMAGE=${{env.FULL_IMAGE}} \
                .

              # FastAPI 서비스만 재시작 (ChromaDB는 유지)
              docker-compose -f docker-compose-tuning.yml pull tuning  # API 이미지만 pull
              docker-compose -f docker-compose-tuning.yml stop tuning  # API 컨테이너만 중지
              docker-compose -f docker-compose-tuning.yml rm -f tuning  # API 컨테이너만 제거
              docker-compose -f docker-compose-tuning.yml up -d tuning  # API 컨테이너만 다시 시작
              
            
              # 서비스 상태 확인
              docker-compose ps

      - name: Wait for FastAPI to start
        run: |
            echo "🕒 FastAPI 서버 기동 대기 중..."
            sleep 15
  
      - name: Health check
        run: |
            echo "🔍 API 서비스 헬스체크 중..."
            for i in {1..3}; do
              if curl -sf http://${{ env.HOST }}:8000/api/v1/health; then
                echo "✅ API 서비스가 정상적으로 시작되었습니다."
                
                # ChromaDB 연결 확인
                echo "🔍 ChromaDB 연결 상태 확인 중..."
                if curl -sf http://${{ env.HOST }}:8000/api/v1/health/chromadb; then
                  echo "✅ ChromaDB가 정상적으로 작동 중입니다."
                else
                  echo "⚠️ 경고: ChromaDB 연결을 확인할 수 없습니다."
                fi
                exit 0
              fi
              echo "⏱️ API 서비스 준비 대기 중... ($i/3)"
              sleep 5
            done
            
            echo "::error::❌ 헬스체크 실패: API 서비스가 응답하지 않습니다."
            exit 1
